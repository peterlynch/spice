<plexus>

	
	<components>

		<component>
      <role>org.sonatype.security.PlexusSecurityManager</role>
      <role-hint>default</role-hint>
      <implementation>org.sonatype.security.web.WebPlexusSecurityManager</implementation>
      <isolated-realm>false</isolated-realm>
      <requirements>
        <requirement>
          <role>org.sonatype.plexus.components.ehcache.PlexusEhCacheWrapper</role>
          <role-hint>default</role-hint>
          <field-name>cacheWrapper</field-name>
        </requirement>
      </requirements>
    </component>

		<component>
			<role>org.sonatype.jettytestsuite.ServletServer</role>
			<implementation>
				org.sonatype.jettytestsuite.ServletServer
			</implementation>
			<configuration>
				<port>12345</port>
				<webappContexts>
					<webappContext>
						<name>sample</name>
						<servletInfos>
							<servletInfo>
								<mapping>/*</mapping>
								<servletClass>org.sonatype.plexus.rest.PlexusServerServlet</servletClass>
								<name>sample</name>
								<initOrder>1</initOrder>
								<parameters>
								
									<property>
										<!-- A stupid hack to avoid OneServletServerPerWebapp limitation, see PlexusServerServlet#getInitParameter -->
										<name>plexus.discoverResources</name>
										<value>true</value>
									</property>
									<property>
				            <!-- A stupid hack to avoid OneServletServerPerWebapp limitation, see PlexusServerServlet#getInitParameter -->
				            <name>sample.roleHint</name>
				            <value>secureApplication</value>
				        	</property>
								
								</parameters>
							</servletInfo>
						</servletInfos>
						<servletFilterInfos>
							<servletFilterInfo>
								<mapping>/*</mapping>
								<filterClass>org.sonatype.security.web.ShiroSecurityFilter</filterClass>
								<parameters>
									<property>
										<name>config</name>
										<value>
				[filters]
				authcBasic = org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter
				authcBasic.applicationName = Sample Application
				#authcBasic.fakeAuthScheme = true
				
				perms = org.sonatype.security.web.filter.authz.HttpVerbMappingAuthorizationFilter
				
			              </value>
									</property>
								</parameters>
							</servletFilterInfo>
						</servletFilterInfos>
					</webappContext>
				</webappContexts>
				<eventListenerInfos>
					<eventListenerInfo>
					    <!-- ThreadLocal hack for using the same Plexus Container as the tests are running on  -->
						<clazz>org.sonatype.security.sample.web.HackServletContextListener</clazz>
						<!--<clazz>org.sonatype.plexus.rest.PlexusContainerContextListener</clazz>-->
					</eventListenerInfo>
				</eventListenerInfos>
			</configuration>
		</component>
	</components>
</plexus>
